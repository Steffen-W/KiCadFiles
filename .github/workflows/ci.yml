name: CI Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master ]
    paths: ['kicadfiles/**', 'tests/**', 'docs/**', 'pyproject.toml', 'README.md']
  pull_request:
    branches: [ main, master ]
    paths: ['kicadfiles/**', 'tests/**', 'docs/**', 'pyproject.toml', 'README.md']
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run code quality checks
      run: |
        echo "üîç Running code quality checks..."
        black --check kicadfiles/
        isort --check-only kicadfiles/
        flake8 kicadfiles/
        mypy kicadfiles/
        pyright kicadfiles/

    - name: Run tests with coverage
      run: |
        echo "üß™ Running tests with coverage..."
        pytest tests/ -v --tb=short --cov=kicadfiles --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    needs: test
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build Sphinx Documentation
      run: |
        echo "üìö Building documentation with Sphinx..."
        cd docs
        make html
        if [ ! -f "build/html/index.html" ]; then
          echo "‚ùå Documentation build failed - index.html not found"
          exit 1
        fi
        echo "‚úÖ Documentation built successfully"

    - name: Configure Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs/build/html

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
