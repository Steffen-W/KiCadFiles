name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI instead of PyPI'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Get version info
      id: version_info
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Use release tag for version
          NEW_TAG="${{ github.event.release.tag_name }}"

          # Validate tag format
          if [[ ! "$NEW_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid tag format: $NEW_TAG (expected: v1.2.3)"
            exit 1
          fi

          NEW_VERSION="${NEW_TAG#v}"
          echo "Using release tag: $NEW_TAG"
        else
          # Auto-increment for workflow_dispatch
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          NEW_TAG="v$NEW_VERSION"
          echo "Auto-generated tag: $NEW_TAG"
        fi

        echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "Version: $NEW_VERSION"

    - name: Update pyproject.toml version
      run: |
        NEW_VERSION="${{ steps.version_info.outputs.new_version }}"
        sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml
        echo "Updated version to $NEW_VERSION in pyproject.toml"

    - name: Create and push tag (workflow_dispatch only)
      if: github.event_name == 'workflow_dispatch'
      run: |
        NEW_TAG="${{ steps.version_info.outputs.new_tag }}"
        NEW_VERSION="${{ steps.version_info.outputs.new_version }}"

        # Check if tag already exists
        if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
          echo "‚ùå Tag $NEW_TAG already exists"
          exit 1
        fi

        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Commit version update
        git add pyproject.toml
        if ! git commit -m "üè∑Ô∏è Bump version to $NEW_VERSION"; then
          echo "‚ùå Failed to commit version update"
          exit 1
        fi

        # Create annotated tag
        if ! git tag -a "$NEW_TAG" -m "üè∑Ô∏è Auto-generated version $NEW_VERSION"; then
          echo "‚ùå Failed to create tag"
          exit 1
        fi

        # Push changes
        if ! git push origin HEAD:${{ github.ref_name }}; then
          echo "‚ùå Failed to push commit"
          exit 1
        fi

        if ! git push origin "$NEW_TAG"; then
          echo "‚ùå Failed to push tag"
          exit 1
        fi

        echo "‚úÖ Created and pushed tag: $NEW_TAG"

    - name: Build package
      run: |
        python -m pip install --upgrade pip build twine
        python -m build
        twine check dist/*

    - name: Publish to TestPyPI
      if: inputs.test_pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

    - name: Publish to PyPI
      if: '!inputs.test_pypi'
      uses: pypa/gh-action-pypi-publish@release/v1